{"version":3,"sources":["components/Dice.tsx","App.tsx","index.tsx"],"names":["Dice","React","useState","dice","setDice","random","setRandom","history","setHistory","output","forEach","roll","push","className","onSubmit","event","preventDefault","Math","floor","onChange","parseInt","target","value","onClick","console","log","map","listItem","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAwGeA,MA/Ff,WAAgB,MAEUC,IAAMC,SAAS,IAFzB,mBAEPC,EAFO,KAEDC,EAFC,OAGcH,IAAMC,SAAS,GAH7B,mBAGPG,EAHO,KAGCC,EAHD,OAIgBL,IAAMC,SAAiB,IAJvC,mBAIPK,EAJO,KAIEC,EAJF,KA6CRC,EAAwB,GAW9B,OARAF,EAAQG,SAAQ,SAAUC,GAEJ,IAAhBA,EAAKN,QAEPI,EAAOG,KAAP,UAAeD,EAAKN,OAApB,aAA+BM,EAAKR,KAApC,SAKF,sBAAKU,UAAU,OAAf,UACE,uBAAMC,SAnDW,SAACC,GAEpBA,EAAMC,iBAGNV,EAAUW,KAAKC,MAAMD,KAAKZ,SAAWF,GAAQ,GAG7CK,EAAW,CAAC,CAAEH,SAAQF,SAAZ,mBAAuBI,MA2C/B,UACE,yBAAQY,SAxCO,SAACJ,GAEpBP,EAAW,CAAC,CAAEH,SAAQF,SAAZ,mBAAuBI,KAGjCD,EAAU,GAGVF,EAAQgB,SAASL,EAAMM,OAAOC,SAgC1B,UACE,wBAAQA,MAAM,KAAd,iBACA,wBAAQA,MAAM,KAAd,iBACA,wBAAQA,MAAM,KAAd,iBACA,wBAAQA,MAAM,IAAd,gBACA,wBAAQA,MAAM,IAAd,gBACA,wBAAQA,MAAM,IAAd,gBACA,wBAAQA,MAAM,MAAd,qBAEF,2CACA,4CACc,IACZ,uBAAMT,UAAU,SAAhB,UACGR,EADH,KACaF,EADb,aAKJ,sBAAKU,UAAU,UAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,gDAEF,qBAAKA,UAAU,gBAAf,SACE,wBAAQU,QAlDI,SAACR,GAEnBT,EAAU,GACVE,EAAW,IAGXgB,QAAQC,IAAI,kBA4CN,qBAEF,qBAAKZ,UAAU,gBAAf,SACE,6BACGJ,EAAOiB,KAAI,SAACC,GAAD,OACV,6BAAKA,kB,MCnFJC,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCFNgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c5a4d637.chunk.js","sourcesContent":["import React from 'react';\nimport './Dice.css';\n\n// Define what a dice roll should look like to the history array\ninterface Roll {\n  random: number;\n  dice: number;\n}\n\nfunction Dice() {\n  // Declare states for dice, random result, and previous rolls\n  const [dice, setDice] = React.useState(20);\n  const [random, setRandom] = React.useState(0);\n  const [history, setHistory] = React.useState<Roll[]>([]);\n\n  // Handles what happens when the Roll button is clicked\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    // Prevent default submit action\n    event.preventDefault();\n\n    // Roll the dice\n    setRandom(Math.floor(Math.random() * dice) + 1);\n\n    // Add result to history array\n    setHistory([{ random, dice }, ...history]);\n  };\n\n  // Handles what happens when the select option is changed\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    // Push last roll to beginning of history array\n    setHistory([{ random, dice }, ...history]);\n\n    // Re-initialise random\n    setRandom(0);\n\n    // Get value of select option, parse as integer, set dice value\n    setDice(parseInt(event.target.value));\n  };\n\n  // Handles what happens when reset button is clicked\n  const handleReset = (event: React.MouseEvent<HTMLButtonElement>) => {\n    // Reset random and history to default values\n    setRandom(0);\n    setHistory([]);\n\n    // Log click\n    console.log('Reset clicked');\n  };\n\n  // Validation logging - uncomment lines below to examine history array\n  // console.log(`History items: ${history.length}`);\n  // console.log(history);\n\n  // Initialise history output array\n  const output: Array<string> = [];\n\n  // Loop through roll history\n  history.forEach(function (roll) {\n    // Negate addition of initial zero rolls to output array\n    if (roll.random !== 0) {\n      // Add string to output array\n      output.push(`${roll.random} (${roll.dice})`);\n    }\n  });\n\n  return (\n    <div className=\"dice\">\n      <form onSubmit={handleSubmit}>\n        <select onChange={handleSelect}>\n          <option value=\"20\">d20</option>\n          <option value=\"12\">d12</option>\n          <option value=\"10\">d10</option>\n          <option value=\"8\">d8</option>\n          <option value=\"6\">d6</option>\n          <option value=\"4\">d4</option>\n          <option value=\"100\">d100</option>\n        </select>\n        <button>Roll!</button>\n        <p>\n          You rolled:{' '}\n          <span className=\"result\">\n            {random} ({dice})\n          </span>\n        </p>\n      </form>\n      <div className=\"results\">\n        <div className=\"results-title\">\n          <h4>Roll History</h4>\n        </div>\n        <div className=\"results-reset\">\n          <button onClick={handleReset}>Clear</button>\n        </div>\n        <div className=\"results-items\">\n          <ol>\n            {output.map((listItem) => (\n              <li>{listItem}</li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dice;\n","import React from \"react\";\r\nimport Dice from \"./components/Dice\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Dice />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}